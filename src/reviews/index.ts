import path from 'path'
import YAML from 'js-yaml'
import fs from 'fs-extra'
import { EventEmitter, Event, window, workspace, FileSystemWatcher } from 'vscode'
import { get, set } from 'lodash'
import { Config } from '../core'

export interface ReviewComment {
  type?: 'approve' | 'request_change' | 'comment'
  comment?: string
  suggestion?: string
  user?: {
    name?: string
    email?: string
  }
  time?: string
  resolved?: boolean
}

export interface ReviewData {
  reviews: Record<string, {
    description?: string
    locales?: Record<string, {
      comments?: ReviewComment[]
    }>
  }>
}

export class Reviews {
  private filepath = ''
  private data: ReviewData = { reviews: {} }
  private _fileWatcher: FileSystemWatcher | undefined

  private _onDidChange: EventEmitter<string> = new EventEmitter()
  readonly onDidChange: Event<string> = this._onDidChange.event

  init(rootpath: string) {
    this._fileWatcher?.dispose()
    this.filepath = path.join(rootpath, '.vscode/i18n-ally-reviews.yml')

    this._fileWatcher = workspace.createFileSystemWatcher(this.filepath)
    this._fileWatcher.onDidChange(() => this.load())
    this._fileWatcher.onDidCreate(() => this.load())
    this._fileWatcher.onDidDelete(() => this.load())

    return this.load()
  }

  private set(key: string, field: string, value?: any, locale?: string) {
    if (locale)
      set(this.data.reviews, [key, 'locales', locale, field], value)
    else
      set(this.data.reviews, [key, field], value)

    this._onDidChange.fire(key)
    return this.save()
  }

  private get(key: string, field: string, locale?: string) {
    if (locale)
      return get(this.data.reviews, [key, 'locales', locale, field])
    else
      return get(this.data.reviews, [key, field])
  }

  setDescription(key: string, description?: string) {
    return this.set(key, 'description', description)
  }

  getDescription(key: string) {
    return this.data.reviews[key]?.description
  }

  getReviews(key: string) {
    return this.data.reviews[key] || {}
  }

  addComment(key: string, locale: string, comment: ReviewComment) {
    const comments = this.get(key, 'comments', locale) || []
    comments.push({
      user: Config.reviewUser,
      ...comment,
      time: new Date().toISOString(),
    })
    return this.set(key, 'comments', comments, locale)
  }

  async promptEditDescription(keypath: string) {
    const value = await window.showInputBox({
      value: this.getDescription(keypath),
      prompt: `Description for "${keypath}"`,
    })
    if (value !== undefined)
      return this.setDescription(keypath, value)
  }

  private async load() {
    const content = await fs.readFile(this.filepath, 'utf-8')
    this.data = content
      ? YAML.safeLoad(content)
      : { reviews: {} }
    this._onDidChange.fire()
  }

  private async save() {
    const text = YAML.safeDump(this.data)
    await fs.writeFile(this.filepath, `# Generated by i18n-ally, please commit this file to source control.\n${text}`, 'utf-8')
  }
}
