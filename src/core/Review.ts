import path from 'path'
import YAML from 'js-yaml'
import fs from 'fs-extra'
import { EventEmitter, Event, window, workspace, FileSystemWatcher } from 'vscode'
import { get, set } from 'lodash'
import { nanoid } from 'nanoid'
import { Config } from './Config'
import { ReviewData, ReviewComment, ReviewCommentWithMeta, TranslationCandidate } from './types'
import { CurrentFile } from './CurrentFile'

export class Reviews {
  private filepath = ''
  private data: ReviewData = { reviews: {} }
  private _fileWatcher: FileSystemWatcher | undefined

  private _onDidChange: EventEmitter<string> = new EventEmitter()
  readonly onDidChange: Event<string> = this._onDidChange.event

  init(rootpath: string) {
    this._fileWatcher?.dispose()
    this.filepath = path.join(rootpath, '.vscode/i18n-ally-reviews.yml')

    this._fileWatcher = workspace.createFileSystemWatcher(this.filepath)
    this._fileWatcher.onDidChange(() => this.load())
    this._fileWatcher.onDidCreate(() => this.load())
    this._fileWatcher.onDidDelete(() => this.load())

    return this.load()
  }

  private set(key: string, field: string, value?: any, locale?: string) {
    if (locale)
      set(this.data.reviews, [key, 'locales', locale, field], value)
    else
      set(this.data.reviews, [key, field], value)

    this._onDidChange.fire(key)
    return this.save()
  }

  private get(key: string, field: string, locale?: string) {
    if (locale)
      return get(this.data.reviews, [key, 'locales', locale, field])
    else
      return get(this.data.reviews, [key, field])
  }

  setDescription(key: string, description?: string) {
    return this.set(key, 'description', description)
  }

  getDescription(key: string): string |undefined {
    return this.get(key, 'description')
  }

  setTranslationCandidate(key: string, locale: string, trans?: TranslationCandidate) {
    return this.set(key, 'translation_candidate', trans, locale)
  }

  getTranslationCandidate(key: string, locale: string): TranslationCandidate | undefined {
    return this.get(key, 'translation_candidate', locale)
  }

  getReviews(key: string) {
    return this.data.reviews[key] || {}
  }

  addComment(key: string, locale: string, comment: Partial<ReviewComment>) {
    const comments = this.get(key, 'comments', locale) || []
    comments.push({
      user: Config.reviewUser,
      id: nanoid(),
      ...comment,
      time: new Date().toISOString(),
    })
    return this.set(key, 'comments', comments, locale)
  }

  getComments(key: string, locale: string, hideResolved = true) {
    const comments: ReviewComment[] = this.get(key, 'comments', locale) || []
    if (hideResolved)
      return comments.filter(i => !i.resolved)
    else
      return comments
  }

  getCommentById(key: string, locale: string, id: string) {
    const comments = this.getComments(key, locale, false)
    const comment = comments.find(i => i.id === id)
    return comment
  }

  getCommentsByLocale(locale: string, hideResolved = true): ReviewCommentWithMeta[] {
    return Object.keys(this.data.reviews)
      .flatMap(keypath => this.getComments(keypath, locale, hideResolved)
        .map((i) => {
          return { ...i, locale, keypath } as ReviewCommentWithMeta
        }),
      )
  }

  getTranslationCandidatesLocale(locale: string) {
    return Object.keys(this.data.reviews)
      .map(keypath => this.getTranslationCandidate(keypath, locale)!)
      .filter(i => i)
  }

  async resolveComment(key: string, locale: string, id: string) {
    const comments = this.getComments(key, locale, false)
    const comment = comments.find(i => i.id === id)

    if (comment) {
      if (Config.reviewRemoveCommentOnResolved)
        comments.splice(comments.indexOf(comment), 1)
      else
        comment.resolved = true
      await this.set(key, 'comments', comments, locale)
      return comment
    }
  }

  async applySuggestion(key: string, locale: string, id: string) {
    const comment = this.getCommentById(key, locale, id)
    if (comment && comment.suggestion) {
      await CurrentFile.loader.write({
        keypath: key,
        locale,
        value: comment.suggestion,
      })
      await this.resolveComment(key, locale, id)
    }
  }

  async promptEditDescription(keypath: string) {
    const value = await window.showInputBox({
      value: this.getDescription(keypath),
      prompt: `Description for "${keypath}"`,
    })
    if (value !== undefined)
      return this.setDescription(keypath, value)
  }

  private async load() {
    const content = await fs.readFile(this.filepath, 'utf-8')
    this.data = content
      ? YAML.safeLoad(content)
      : { reviews: {} }
    this._onDidChange.fire()
  }

  private async save() {
    let content = YAML.safeDump(this.data)
    content = `# Review comments generated by i18n-ally. Please commit this file.\n\n${content}`
    await fs.writeFile(this.filepath, content, 'utf-8')
  }
}
